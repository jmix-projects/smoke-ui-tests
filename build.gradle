plugins {
    id 'io.jmix' version '1.5.5'
    id 'java'
    id 'groovy'
}

apply plugin: 'org.springframework.boot'

jmix {
    bomVersion = '1.5.5'
    projectId = 'sales'
}

group = 'com.company'
version = '0.0.1-SNAPSHOT'

repositories {
    // def repository = 'nexus.jmix.io'
    // def repository = 'eu-central-1.repo.jmix.io'
    // def repository = 'us-east-1.repo.jmix.io'
    mavenCentral()
    maven {
        url "https://${repository}/repository/public"
    }
    maven {
        url = "https://${repository}/repository/premium"
        credentials {
            username = rootProject['premiumRepoUser']
            password = rootProject['premiumRepoPass']
        }
    }
}

dependencies {
    implementation 'io.jmix.core:jmix-core-starter'
    implementation 'io.jmix.data:jmix-eclipselink-starter'
    implementation 'io.jmix.ui:jmix-ui-starter'
    implementation 'io.jmix.ui:jmix-ui-data-starter'
    implementation 'io.jmix.security:jmix-security-starter'
    implementation 'io.jmix.security:jmix-security-ui-starter'
    implementation 'io.jmix.security:jmix-security-data-starter'
    implementation 'io.jmix.localfs:jmix-localfs-starter'

    implementation 'org.springframework.boot:spring-boot-starter-web'

    runtimeOnly 'org.hsqldb:hsqldb'

    themes 'io.jmix.ui:jmix-ui-themes'
    implementation 'io.jmix.ui:jmix-ui-themes'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    implementation('org.jsoup:jsoup') {
        version {
            strictly '1.11.2'
        }
    }
    testImplementation "io.jmix.masquerade:jmix-masquerade:1.2.0"

    testImplementation 'com.codeborne:selenide:6.18.0'
    testImplementation 'org.codehaus.groovy:groovy:3.0.10'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'

    testImplementation 'org.testcontainers:selenium:1.17.6'
    testImplementation 'org.testcontainers:junit-jupiter:1.17.6'
    testImplementation 'org.testcontainers:postgresql:1.17.6'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit'
    }

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    testRuntimeOnly 'org.postgresql:postgresql:42.7.3'

    /*
    implementation 'io.jmix.appsettings:jmix-appsettings-starter'
    implementation 'io.jmix.appsettings:jmix-appsettings-ui-starter'

    implementation 'io.jmix.audit:jmix-audit-ui-starter'
    implementation 'io.jmix.audit:jmix-audit-starter'

    implementation 'io.jmix.bpm:jmix-bpm-ui-starter'
    implementation 'io.jmix.bpm:jmix-bpm-starter'

    implementation 'io.jmix.businesscalendar:jmix-businesscalendar-ui-starter'
    implementation 'io.jmix.businesscalendar:jmix-businesscalendar-starter'

    widgets 'io.jmix.ui:jmix-charts-widgets'
    implementation 'io.jmix.ui:jmix-charts-starter'

    implementation 'io.jmix.dashboards:jmix-dashboards-ui-starter'
    implementation 'io.jmix.dashboards:jmix-dashboards-starter'

    implementation 'io.jmix.datatools:jmix-datatools-starter'
    implementation 'io.jmix.datatools:jmix-datatools-ui-starter'

    implementation 'io.jmix.dynattr:jmix-dynattr-ui-starter'
    implementation 'io.jmix.dynattr:jmix-dynattr-starter'

    implementation 'io.jmix.email:jmix-email-ui-starter'
    implementation 'io.jmix.email:jmix-email-starter'

    implementation 'io.jmix.emailtemplates:jmix-emailtemplates-starter'
    implementation 'io.jmix.emailtemplates:jmix-emailtemplates-ui-starter'

    implementation 'io.jmix.grapesjs:jmix-grapesjs-ui-starter'

    implementation 'io.jmix.gridexport:jmix-gridexport-ui-starter'

    implementation 'io.jmix.imap:jmix-imap-ui-starter'
    implementation 'io.jmix.imap:jmix-imap-starter'

    implementation 'io.jmix.ldap:jmix-ldap-starter'

    widgets 'io.jmix.maps:jmix-maps-ui-widgets'
    implementation 'io.jmix.maps:jmix-maps-starter'
    implementation 'io.jmix.maps:jmix-maps-ui-starter'

    implementation 'io.jmix.multitenancy:jmix-multitenancy-ui-starter'
    implementation 'io.jmix.multitenancy:jmix-multitenancy-starter'

    implementation 'io.jmix.notifications:jmix-notifications-starter'
    implementation 'io.jmix.notifications:jmix-notifications-ui-starter'

    widgets 'io.jmix.ui:jmix-pivot-table-widgets'
    implementation 'io.jmix.ui:jmix-pivot-table-starter'

    implementation 'io.jmix.quartz:jmix-quartz-starter'
    implementation 'io.jmix.quartz:jmix-quartz-ui-starter'

    implementation 'io.jmix.reports:jmix-reports-starter'
    implementation 'io.jmix.reports:jmix-reports-ui-starter'
    implementation 'io.jmix.reports:jmix-reports-rest-starter'

    implementation 'io.jmix.rest:jmix-rest-starter'
    implementation 'io.jmix.security:jmix-security-oauth2-starter'

    implementation 'io.jmix.search:jmix-search-ui-starter'
    implementation 'io.jmix.search:jmix-search-starter'

    implementation 'io.jmix.webdav:jmix-webdav-ui-starter'
    implementation 'io.jmix.webdav:jmix-webdav-rest-starter'
    implementation 'io.jmix.webdav:jmix-webdav-starter'

    implementation 'io.jmix.translations:jmix-translations-nl'
    implementation 'io.jmix.translations:jmix-translations-fr'
    implementation 'io.jmix.translations:jmix-translations-it'
    implementation 'io.jmix.translations:jmix-translations-el'
    implementation 'io.jmix.translations:jmix-translations-ckb'
    implementation 'io.jmix.translations:jmix-translations-de'
    implementation 'io.jmix.translations:jmix-translations-ru'
    implementation 'io.jmix.translations:jmix-translations-ro'
    implementation 'io.jmix.translations:jmix-translations-zh-cn'
    */


}

task testUi(type: Test) {
    useJUnitPlatform()

    filter {
        includeTestsMatching "io.jmix.tests.ui.*"
    }

    if (rootProject.hasProperty('jmix.tests.ui.baseHost')) {
        systemProperty 'jmix.tests.ui.baseHost', rootProject['jmix.tests.ui.baseHost']
    } else {
        systemProperty 'jmix.tests.ui.baseHost', 'http://host.docker.internal'
    }

    if (rootProject.hasProperty('selenide.browser')) {
        systemProperty 'selenide.browser', rootProject['selenide.browser']
    }

    if (rootProject.hasProperty('webdriver.chrome.driver')) {
        systemProperty 'webdriver.chrome.driver', rootProject['webdriver.chrome.driver']
    }

    if (rootProject.hasProperty('webdriver.gecko.driver')) {
        systemProperty 'webdriver.gecko.driver', rootProject['webdriver.gecko.driver']
    }

    def envProperties = rootProject.getProperties()
    for (def entry in envProperties.entrySet()) {
        if (String.valueOf(entry.key).startsWith('selenide.')) {
            systemProperty(String.valueOf(entry.key), entry.value)
        }
    }
}

test.dependsOn testUi

compileWidgets {
    generate "com.company.samplesales.widgets.CustomWidgetSet"
    includePaths('**/io/jmix/**/widget/**', '**/com/company/samplesales/widgets/**')
}